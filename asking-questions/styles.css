/* ===========================
WORKSHOP STARTS HERE LOOK HERE HI
Now here are all the rules we are 
looking at in this workshop 
=========================== */
/* What would happen if you add !important to this color:red ?
color: red !important; */
#important {
  color: red;
}
#important p {
  color: var(--ink);
}
main ul {
  display: grid;
}
#hundred {
  width: 100%;
}
#infinite {
  color: var(--ink);
}
.questions li.question:nth-child(6) {
  color: red;
}
#boolean {
  opacity: 1;
  transition: opacity 0.3s;
}
#boolean:hover,
#boolean:focus {
  display: none;
  opacity: 0;
}
#fallback {
  color: var(--black);
}

/* Here's our design 
It's fonts, colours, and spacing.
Every design is made of these basic building blocks.
Change the values in Devtools */
:root {
  /* fonts */
  --copy: "Lato", system-ui;
  /* colours */
  --paper: hsla(260, 35%, 90%, 0.95);
  --ink: hsla(270, 8%, 20%, 0.98);
  --brand: hsla(0, 100%, 67%, 0.98);
  /* spacing */
  --space: 1rem;
  --box: 18rem;
  --container: clamp(var(--box), calc(100vw - calc(var(--space) * 2)), 74rem);
  --finger: 48px;
  --line-length: 60ch;
}
/* What does this rule do? Try removing it. */
* {
  box-sizing: border-box;
}
/* What about this one? 
Make a prediction first and then find and uncheck this rule in Devtools */
body,
html {
  padding: 0;
  margin: 0;
}
/* Rules for interactive elements like links and buttons. 
What happens when you change the order of these rules around? */
a,
a:any-link {
  color: currentColor;
  text-decoration: none;
  font-weight: bold;
  transition: all 0.3s;
}
:focus {
  outline: none;
}
a:hover,
a:focus {
  color: var(--brand);
}
a:focus {
  outline: 2px dashed var(--brand);
}

/* LAYOUT 
Set up the body rules: fonts, colours, and spacing. 
Everything inside the body will inherit these basic styles
*/
body {
  font: 100%/1.5 var(--copy), system-ui, sans-serif;
  background-color: var(--paper);
  color: var(--ink);
  /* Let's also write a layout for the whole site.  */
  display: grid;
  gap: var(--space);
  grid-template:
    ". ...... ." var(--space)
    ". header ." min-content
    ". main   ." minmax(75vh, 1fr)
    ". ...... ." var(--space) /
    minmax(var(--space), 1fr) var(--container) minmax(var(--space), 1fr);
  place-content: center;
}
/* Now let's add each component to this grid layout 
And give them their own layouts inside. */
header {
  grid-area: header;
  display: flex;
  align-items: center;
  justify-content: space-between;
}
header svg {
  width: var(--finger);
}
main {
  grid-area: main;
}
